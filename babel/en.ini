[meta]
name = English
language = en
contributors = Yiays#5930
inherit = 

[main]
command_reload_help = {p:local}{cmd} (extension)
	Reloads a given extension without restarting the bot. You can reload config or babel as well.
extension_enable_success = `{extension}` is configured to load on startup.
extension_disable_success = `{extension}` is configured to not load on startup.
extension_load_success = Loaded {extension} successfully!
extension_unload_success = Unloaded {extension} successfully!
extension_reload_success = Reloaded {extension} successfully!
extension_file_missing = The source file for this extension has gone missing!
extension_not_found = Unable to match the extension name you provided with an available extension.
extensions_list = Here's a list of currently enabled extensions;
	```
	{list}
	```
list_conjunction = ,_
list_last_conjunction = _and_

[language]
command_language_help = {p:local}{cmd} (get|set (langcode)|list)
	Changes the language that will be used when speaking to you *or your guild*. Use `{p:local}{cmd} list` to find translations and then set one.
	Only admins can change the guild language.
list_title = Available languages
set_howto = Set a language using `{p:local}language set` and a given language code below.
contribute_cta = Contribute to the translation effort here: {c:language/contribute_url}
unknown_contributors = No contributors credited
coverage_label = *Coverage:* {coverage}%%
origin_reason_author = You personally requested this language via command.
origin_reason_author_locale = Set as your language in Discord user preferences.{backup? - Used whenever above languages are missing a translation.|}
origin_reason_guild = An admin set this as the default language for this guild via command.{backup? - Used whenever above languages are missing a translation|}
origin_reason_guild_locale = Set as this guild's language in server preferences.{backup? - Used whenever above languages are missing a translation|}
origin_reason_default = The primary language this bot is written in.{backup? - Used whenever above languages are missing a translation|}
origin_reason_inherit = The language above depends on this language file.
set_failed_invalid_pattern = Your language code must fit the pattern. (ie. `en` or `br-PT`, this is case sensitive)
set_warning_no_match = This language hasn't been translated yet, but if it ever is, you'll be among the first to see it.
set_success = Success! {c:main/botname} will now speak {language} {usermode?to you|in this guild}.
unset_success = Success! {c:main/botname} will speak the default language ({language}) {usermode?to you|in this guild}.

[help]
title = {c:main/botname} help
command_help_help = {p:local}{cmd} [command]
	Highlights some useful commands and explains how to use the prefixes.
	When [command] is given, instructions on how to use this command are given instead.
command_about_help = {p:local}{cmd}
	Information about {c:main/botname}, including an invite link
command_changes_help = {p:local}{cmd} [version]
	Lists changes made to {c:main/botname} since the most recent update (or an update version number you specify)
no_docs = This command doesn't currently have any usage information.
future_command = This command will be coming in a future update.
obsolete_command = This command has been removed. There's no plans to restore it.
moved_command = Functionality of this command has moved to `{p:local}{cmd}`.
no_command = This command either doesn't exist or is currently disabled.
introduction = **The prefix is `{p:local}`.**{longprefix? *You can also use `{longprefix}`*|}
	Get usage info for a command using `{p:local}help [command]`.
	{videoexamples?You can also see video examples on the [help website]({c:help/helpurl})|}
	{serverinv?Get dedicated support from the developer and other users on the [support server]({serverinv})|}
helpurl_cta = Go to {c:help/helpurl} to learn more!
creator_footer = {c:main/botname} v{c:main/ver} created by {c:main/creator}
about_title = About {c:main/botname}
bot_description = {c:main/botname} is a modular bot with plenty of fun, useful, fair, and free features. {c:main/botname} is also open source, people are welcome to contribute their own modules at {c:help/codeurl}.
about_field1_title = âœ¨ Features
about_field1_value = {c:main/botname} has **{cmds}** commands available to **{guilds}** servers.
	With the right modules, {c:main/botname} should be able to do just about anything. Right now, {c:main/botname} can do polls, server cleaning, roll dice, use custom emoji, and all in multiple languages!
about_field2_title = ðŸ§  Autocomplete everything
about_field2_value = {c:main/botname} commands have thorough and smart autocomplete suggestions for any parameters which make learning how to use the bot painless.
about_field3_title = ðŸ“š Dedicated support
about_field3_value = Using {p:local}help, you should be able to learn everything there is to know about {c:main/botname}.
	{videoexamples?Video examples demonstrating how to use commands can also be found on {c:main/botname}'s [website]({c:help/helpurl}).|}
	{serverinv?There is also a [support server]({c:help/serverinv}) where you can get any questions answered and see demos.|}
about_field4_title = ðŸ§© Modular codebase
about_field4_value = {c:main/botname} is built from the modular *Merely Framework*, this framework brings about easy translation, interruption-free updates, and easy expandability.
about_field5_title = âž• Add to your server
about_field5_value = Add {c:main/botname} to your discord server with this link: {invite}
changelog_title = {c:main/botname} changelog
changelog_description = List of changes from v{ver}:
changelog_cta = View the full changelog online: ({logurl})

[error]
missingrequiredargument = A required parameter for this command is missing or invalid.
noprivatemessage = This command *can't* be used in private messages.
privatemessageonly = This command can **only** be used in private messages.
cooldown = You must wait {t} more seconds before you can use this command again.
commanderror = An error occured while trying to run this command, please try again later.\n```{error}```
slash_migration_title = Slash command migration
slash_migration = {c:main/botname} is migrating towards slash commands. Try the same command but with `/` as the prefix.
slash_migration_problems_title = Any problems?
slash_migration_problems = Try these solutions if slash commands aren't working;
	- Ensure your users and this bot have `Use Application Commands` permission.
	- You may need to kick and reinvite {c:main/botname} with this [new invite link]({invite}).
	- After making any changes, wait for at least few minutes, slash commands can take up to an hour to update.

[premium]
command_premium_help = {p:local}{cmd}
	Learn how you can get more out of {c:main/botname} with premium.
required_title = {c:main/botname} premium required!
required_error = You'll need to subscribe to {c:main/botname} premium to use this command.
	*(If you've already subscribed, make sure you're in the support server and have the {role} role)*
	Use `{p:local}premium` to find out more and subscribe!
name = {c:main/botname} premium
cta = Join here! {link}
desc = {c:main/botname} premium supports development and hosting costs, but also gives you access to the following extra features;
feature_1 = 
feature_1_desc = 
feature_2 = priority translation
feature_2_desc = premium accounts help fund professional translations, which drastically improve the experience for everyone. the languages used/requested by premium accounts are given priority for the translation effort.
feature_3 = priority support
feature_3_desc = premium accounts get access to a premium support channel in the support server. questions here will always be answered first whenever there is a backlog. premium accounts also have more influence over new features.
fine_print = you'll need to stay in the bot support server to use premium features

[auth]
unauthorized = You must be a server owner to use this command!
not_admin = You must be an admin to use this command!
not_mod = You must be a moderator to use this command!
not_superuser = You must be a {c:main/botname} superuser to use this command! (This is a list of users maintained by {c:main/creator})
not_authuser = You must be a {c:main/botname} authuser to use this command! (This is a list of users maintained by {c:main/creator})

[prefix]
command_prefix_help = {p:local}{cmd} (set|get|unset)
	Set a custom prefix for this guild
set_success = **The prefix used on this server is now `{prefix}`!* (Mentioning always works as a backup)*
get = The prefix on this server {prefix?is currently `{prefix}`, the default is|hasn't been changed from the default} `{p:local}`.
unset_success = The prefix on this server has been reset to the default (`{p:global}`).

[example]
command_example_help = {p:local}{cmd} (echo)
	Repeats your message back to you.

[admin]
command_janitor_help = {p:local}{cmd} (join [strict]|leave)
	Janitor will auto-delete messages sent to and from {c:main/botname} after 30 seconds.
	If you provide the strict flag, janitor will delete **all** messages sent in this channel.
command_clean_help = {p:local}{cmd} (n|start_id-end_id) [strict]
	Mass-deletes messages from a channel, `n` specifies how many messages to look back, 'strict' deletes all messages, as opposed to just messages to and from this bot.
	If you instead provide two message IDs separated by a dash, {cmd} will run on this range instead of scanning back from the current message.
command_die_help = {p:local}{cmd} [saveconfig]
	Shuts down the bot safely, manually saves the config file if you specify.
janitor_set_success = Successfully added or updated the janitor for this channel.
janitor_unset_success = Successfully removed the janitor for this channel.
clean_success = Deleted {n} message(s) successfully.
clean_failed = Cleaning failed, this is likely because the `Read message history` and `Manage messages` permissions are needed.
die_success = Shutting down...

[eventmsg]
command_eventmessage_help = {p:local}{cmd} (channel) (event) (action)
	Configure {c:main/botname} to take an action whenever it observes a specified event on your server.
	This events are monitored on all channels {c:main/botname} can see, and a message (if applicable) is sent to the channel you specify.
	Events can be edited later by using the same parameters. The channel is discarded if you use `GRANT_XP`. Setting the action to `NOTHING` will delete the event.
event_controlpanel = Use the controls below to configure your event handler.
	{message?\n**In {channel}:**\n> `{message}`\n|}{xp?*\n> The user which triggered this event will gain {xp} XP.*\n|}
	{usage?**Available variables (and example values):**\n>>> |}{usage}

[greeter]
command_welcome_help = {p:local}{cmd} (get|set|clear)
	control the welcome message for your server
	use `set` to get instructions on how to set a new welcome message
command_farewell_help = {p:local}{cmd} (get|set|clear)
	control the farewell message for your server
	use `set` to get instructions on how to set a new farewell message
greeting_preview = in {channel}: {message}
welcome_set_instructions = to set a welcome message, use `{p:local}welcome set Welcome, {} to the {} server!` (as an example)
	*the first {} will always become a mention of the user, and the second {} will always be the current server name.*
welcome_set_success = successfully set the welcome message!
welcome_clear_success = removed and disabled the welcome message.
welcome_clear_failed = you don't currently have a welcome message set.
farewell_set_instructions = to set a farewell message, use `{p:local}farewell set Farewell, {} from the {} server!` (as an example)
	*the first {} will always become the username of the departed user, and the second {} will always be the current server name.*
farewell_set_success = successfully set the farewell message!
farewell_clear_success = removed and disabled the farewell message.
farewell_clear_failure = you don't currently have a farewell message set.

[reactroles]
command_reactrole_help = {p:local}{cmd} (prompt)
	creates a message with your given prompt for reactions. each react you provide can be associated with roles.
	roles will be given to any users that react with a given reaction.
setup1 = react to the prompt to add a reactionrole.{canstop? *don't react to finish.*|}
setup2 = mention role(s) to add them to {emoji}
setup2_repeat = **this emoji has already been given roles.**
setup_cancel = canceled reactionroles setup *(timeout after each step is 30 seconds)*
setup_success = reactionroles setup complete! delete the prompt at any time to undo.
role_change = Changed your roles in {server};{taken? you lost the role(s) {taken}.|}{given? you gained the role(s) {given}.|}

[poll]
command_poll_help = {p:local}{cmd} (title) (answer1) (answer2) [answerx] [expiryDays] [expiryHours] [expiryMinutes] [expirySeconds]
	Creates an interactive poll.
	You can provide up to 10 choices. The total amount of time from the expiry paramaters is added up.
poll_created = {author} has started a poll.
timenames = year,month,week,day,hour,minute,second
timeplurals = years,months,weeks,days,hours,minutes,seconds
time_number_format = {number} {name}
inf_past = Closed a long time ago.
far_past = Closed {timelist} ago.
near_past = Closed recently.
present = Closing now.
near_future = Closing very soon.
far_future = Closing in {timelist}.
vote_cta = React to vote | This poll is{multichoice?| not} multichoice
no_winner = The poll *"{title}"* expired with no votes.
one_winner = The winner of the *"{title}"* poll is **"{winner}"**
multiple_winners = The {num} winners of the *"{title}"* poll are **"{winners}"**

[dice]
command_dice_help = {p:local}{cmd} [sides]
	Rolls up to any number of dice with any number of sides you specify. Separate each dice by a comma *(for example, "4,6,8" would roll one 4-sided, one 6-sided, and one 8-sided die)*.
	Defaults to one 6-sided die.
roll_result = Dice #{i}: {r}
roll_error = One of the numbers you provided appears to be invalid.

[emoji]
command_emoji_help = {p:local}{cmd} (emoji name)
	Replies with an emoji that the bot can see with a matching name.
	Invite {c:main/botname} to more servers in order to get more emojis.
command_emojicmd_help = {p:local}{cmd}
	Replies with a random emoji consistent with the provided command name.
not_found = Failed to find an emoji with that name.

